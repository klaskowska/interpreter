-- Grammar of my programming language

-- Programs
entrypoints Prog ;
Prog.       Prog ::= [FuncDef] ;
FuncDef.    FuncDef ::= Type Ident "(" [Arg] ")" Block ;
separator FuncDef "" ;
ArgVal.     Arg ::= Type Ident ;
ArgRef.     Arg ::= Type "&" Ident ;
separator Arg "," ;

-- Statements
Block.      Block ::= "{" [Stmt] "}" ;
BlockStmt.  Stmt ::= Block ;
VarDef.     Stmt ::= Type Item ";" ;
NoInit.     Item ::= Ident ;
Init.       Item ::= Ident "=" Expr ;
Ass.        Stmt ::= Ident "=" Expr ";" ;
If.         Stmt ::= "if" "(" Expr ")" Stmt "endif" ;
IfElse.     Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt "endif" ;
While.      Stmt ::= "while" "(" Expr ")" Stmt "endwhile" ;
CallFunc.   Stmt ::= Ident "(" [Expr] ")" ";" ;
StmtExpr.   Stmt ::= "calc" Expr ";" ;
PrintInt.   Stmt ::= "print_int" "[" Expr "]" ";" ;
PrintStr.   Stmt ::= "print_str" "[" Expr "]" ";" ;
SEmpty.     Stmt ::= ";" ;
Ret.        Stmt ::= "return" Expr ";" ;
RetVoid.    Stmt ::= "return" ";" ;
separator Stmt "" ;

-- Expressions
EVar.       Expr6 ::= Ident ;
EInt.       Expr6 ::= Integer ;
ETrue.      Expr6 ::= "True" ;
EFalse.     Expr6 ::= "False" ;
EString.    Expr6 ::= String ;
ECallFunc.  Expr6 ::= Ident "(" [Expr] ")" ;
ELambda.    Expr6 ::= "lambda" "(" [Arg] ")" "->" Type Block ;
Neg.        Expr5 ::= "-" Expr6 ;
Not.        Expr5 ::= "!" Expr6 ;
EMul.       Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;
ERel.       Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;
EOr.        Expr ::= Expr1 "||" Expr ;

separator Expr ",";
coercions  Expr 6 ;

-- Operators
Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- Types 
Int.       Type1 ::= "int" ;
Str.       Type1 ::= "string" ;
Bool.      Type1 ::= "bool" ;
Void.      Type1 ::= "void" ;
FuncType.  Type ::= "function" "<" Type ">" "(" [Type] ")" ;
separator Type "," ;
coercions Type 1 ;

-- comments
comment "//" ;
comment "/*" "*/" ;